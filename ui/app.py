import streamlit as st
import pandas as pd
from pathlib import Path
import sys
import os

# Proje k√∂k dizinini PYTHONPATH'a ekle (ModuleNotFoundError √∂nlemek i√ßin)
PROJECT_ROOT = Path(__file__).resolve().parent.parent
if str(PROJECT_ROOT) not in sys.path:
    sys.path.insert(0, str(PROJECT_ROOT))

from src.data_loader import load_processed  # noqa: E402
from src import config  # noqa: E402

st.set_page_config(
    page_title="YKS Yerle≈ütirme Analizi", 
    page_icon="üìä",
    layout="wide",
    initial_sidebar_state="expanded"
)

# CSS ile hover efektleri
st.markdown("""
<style>
/* Multiselect ve selectbox hover efektleri */
.stMultiSelect > div > div > div {
    cursor: pointer;
}

.stSelectbox > div > div > div {
    cursor: pointer;
}

/* Multiselect dropdown ok i≈üareti i√ßin */
.stMultiSelect > div > div > div > div > svg {
    cursor: pointer;
}

/* Selectbox dropdown ok i≈üareti i√ßin */
.stSelectbox > div > div > div > div > svg {
    cursor: pointer;
}

/* Genel hover efekti */
.stMultiSelect:hover, .stSelectbox:hover {
    cursor: pointer;
}
</style>
""", unsafe_allow_html=True)

# Sidebar'da UniMonkey logosu ve branding
st.sidebar.markdown("""
<div class="sidebar-logo">
    <h2>üêí UniMonkey</h2>
</div>
""", unsafe_allow_html=True)

st.title("YKS Yerle≈ütirme Analiz Platformu")

@st.cache_data(show_spinner=True)
def get_data() -> pd.DataFrame:
    return load_processed()

with st.spinner("Veri y√ºkleniyor..."):
    df = get_data()

st.success(f"Toplam satƒ±r (i≈ülenmi≈ü): {len(df):,}")

# S√ºtun adlarƒ±nƒ± sadele≈ütirme (tekrar eden kolon gruplarƒ± i√ßin index ekleme opsiyonel)
# Burada orijinal s√ºtunlarƒ± koruyoruz.

# Filtre b√∂lmesi
with st.sidebar:
    st.header("Filtreler")
    uni_turleri = sorted(df["√úniversite T√ºr√º"].dropna().unique().tolist()) if "√úniversite T√ºr√º" in df.columns else []
    secilen_tur = st.multiselect("√úniversite T√ºr√º", uni_turleri, default=uni_turleri[:3] if len(uni_turleri)>3 else uni_turleri)

    puan_turleri = sorted(df["Puan T√ºr√º"].dropna().unique().tolist()) if "Puan T√ºr√º" in df.columns else []
    secilen_puan = st.multiselect("Puan T√ºr√º", puan_turleri, default=puan_turleri)

    st.markdown("---")
    st.subheader("üó∫Ô∏è Coƒürafi Filtreler")
    
    # √áoklu se√ßim - B√∂lge  
    bolgeler = sorted(df["B√∂lge"].dropna().unique().tolist()) if "B√∂lge" in df.columns else []
    secilen_bolgeler = st.multiselect("B√∂lge Se√ßin", bolgeler, default=bolgeler)

    # Tek se√ßim - ƒ∞l (se√ßilen b√∂lgelere g√∂re)
    if secilen_bolgeler and "B√∂lge" in df.columns and "ƒ∞l" in df.columns:
        uygun_iller = df[df["B√∂lge"].isin(secilen_bolgeler)]["ƒ∞l"].dropna().unique()
        uygun_iller = ["T√ºm√º"] + sorted(uygun_iller.tolist())
    else:
        uygun_iller = ["T√ºm√º"] + sorted(df["ƒ∞l"].dropna().unique().tolist()) if "ƒ∞l" in df.columns else ["T√ºm√º"]
    
    secilen_il = st.selectbox(
        f"ƒ∞l Se√ßin ({len(uygun_iller)-1} uygun il)", 
        uygun_iller, 
        index=0
    )

    st.markdown("---")
    st.subheader("üìä Puan & Kontenjan Filtreleri")

    min_puan = st.number_input("En K√º√ß√ºk Puan >=", value=0.0, step=1.0)
    max_puan = st.number_input("En K√º√ß√ºk Puan <=", value=1000.0, step=1.0)

    # Kontenjan aralƒ±ƒüƒ± filtresi (ilk 'Kontenjan' kolonu baz alƒ±nƒ±r)
    kont_range = None
    if "Kontenjan" in df.columns:
        _kont_numeric = pd.to_numeric(df["Kontenjan"], errors='coerce')
        if _kont_numeric.notna().any():
            kmin = int(_kont_numeric.min())
            kmax = int(_kont_numeric.max())
            kont_range = st.slider("Kontenjan aralƒ±ƒüƒ±", min_value=kmin, max_value=kmax, value=(kmin, kmax), step=1)

filtreli = df.copy()
if secilen_tur:
    filtreli = filtreli[filtreli["√úniversite T√ºr√º"].isin(secilen_tur)]
if secilen_puan:
    filtreli = filtreli[filtreli["Puan T√ºr√º"].isin(secilen_puan)]
# √áoklu b√∂lge filtresi
if secilen_bolgeler and "B√∂lge" in filtreli.columns:
    filtreli = filtreli[filtreli["B√∂lge"].isin(secilen_bolgeler)]
# Tek il filtresi  
if secilen_il and secilen_il != "T√ºm√º" and "ƒ∞l" in filtreli.columns:
    filtreli = filtreli[filtreli["ƒ∞l"] == secilen_il]
if "Kontenjan" in filtreli.columns and 'kont_range' in locals() and kont_range is not None:
    _fk = pd.to_numeric(filtreli["Kontenjan"], errors='coerce')
    filtreli = filtreli[(_fk >= kont_range[0]) & (_fk <= kont_range[1])]

# Puana g√∂re sayƒ±sal filtre (bazƒ± h√ºcrelerde '--' olabilir)
if "En K√º√ß√ºk Puan" in filtreli.columns:
    def to_float(x):
        try:
            return float(str(x).replace(',', '.'))
        except ValueError:
            return None
    filtreli = filtreli.assign(_enkucuk=filtreli["En K√º√ß√ºk Puan"].map(to_float))
    filtreli = filtreli[(filtreli["_enkucuk"].isna()) | ((filtreli["_enkucuk"]>=min_puan) & (filtreli["_enkucuk"]<=max_puan))]

st.subheader("Veri Tablosu (ƒ∞≈ülenmi≈ü)")
# Index'i 1'den ba≈ülat
display_df = filtreli.drop(columns=["_enkucuk"], errors='ignore').head(100).copy()
display_df.index = range(1, len(display_df) + 1)
st.dataframe(display_df, use_container_width=True)

st.caption("ƒ∞lk 100 satƒ±r g√∂sterildi (performans i√ßin). Filtreleme t√ºm veriye uygulanƒ±yor.")

# Basit √∂zetler
st.subheader("üìà Filtreleme Sonu√ßlarƒ±")
col1, col2, col3, col4 = st.columns(4)
with col1:
    st.metric("G√∂sterilen Program", f"{len(filtreli):,}")
with col2:
    if "ƒ∞l" in filtreli.columns:
        unique_il = filtreli["ƒ∞l"].nunique()
        st.metric("ƒ∞l Sayƒ±sƒ±", unique_il)
with col3:
    if "B√∂lge" in filtreli.columns:
        unique_bolge = filtreli["B√∂lge"].nunique()
        st.metric("B√∂lge Sayƒ±sƒ±", unique_bolge)
with col4:
    if "√úniversite Adƒ±" in filtreli.columns:
        unique_uni = filtreli["√úniversite Adƒ±"].nunique()
        st.metric("√úniversite Sayƒ±sƒ±", unique_uni)

# Doluluk oranƒ± hesaplama (Kontenjan & Yerle≈üen tekrar eden kolonlar olduƒüundan ilk √ßifti kullanƒ±yoruz)
if {"Kontenjan", "Yerle≈üen"}.issubset(filtreli.columns):
    try:
        kont = pd.to_numeric(filtreli["Kontenjan"], errors='coerce')
        yerl = pd.to_numeric(filtreli["Yerle≈üen"], errors='coerce')
        doluluk = (yerl.sum()/kont.sum()*100) if kont.sum() else None
        if doluluk is not None:
            st.metric("Toplam Doluluk (%)", f"{doluluk:0.2f}")
    except Exception as e:
        st.write(f"Doluluk hesaplanamadƒ±: {e}")

st.markdown("---")
st.caption("Geli≈ümi≈ü analizler i√ßin yakƒ±nda ek sayfalar eklenecek.")
